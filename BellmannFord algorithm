import sys;

class Node(object):

	def __init__(self, name):
		self.name = name;
		self.visited = False;
		self.predecessor = None;
		self.adjacenciesList = [];
		self.minDistance = sys.maxsize;
		
class Edge(object):

	def __init__(self, weight, startVertex, targetVertex):
		self.weight = weight;
		self.startVertex = startVertex;
		self.targetVertex = targetVertex;
		

			
	def getShortestPathTo(self, targetVertex):

		if not BellmanFord.HAS_CYCLE:
			print("Shortest path exists with value: ", targetVertex.minDistance);
			
			node = targetVertex;
			
			while node is not None:
				print("%s " % node.name);
				node = node.predecessor;
		else:
			print("Negative cycle detected...");
			
			
